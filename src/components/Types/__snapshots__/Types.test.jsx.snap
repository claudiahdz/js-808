// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Types renders the component correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="types"
>
    <div
        className="type"
    >
        Kick
        <input
            defaultValue="100"
            onChange={[Function]}
            type="range"
        />
    </div>
    <div
        className="type"
    >
        Snare
        <input
            defaultValue="100"
            onChange={[Function]}
            type="range"
        />
    </div>
    <div
        className="type"
    >
        Open Hat
        <input
            defaultValue="100"
            onChange={[Function]}
            type="range"
        />
    </div>
    <div
        className="type"
    >
        Closed Hat
        <input
            defaultValue="100"
            onChange={[Function]}
            type="range"
        />
    </div>
</div>,
  "nodes": Array [
    <div
      className="types"
>
      <div
            className="type"
      >
            Kick
            <input
                  defaultValue="100"
                  onChange={[Function]}
                  type="range"
            />
      </div>
      <div
            className="type"
      >
            Snare
            <input
                  defaultValue="100"
                  onChange={[Function]}
                  type="range"
            />
      </div>
      <div
            className="type"
      >
            Open Hat
            <input
                  defaultValue="100"
                  onChange={[Function]}
                  type="range"
            />
      </div>
      <div
            className="type"
      >
            Closed Hat
            <input
                  defaultValue="100"
                  onChange={[Function]}
                  type="range"
            />
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Types
        changeVolume={[Function]}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "changeVolume": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="types"
>
          <div
                    className="type"
          >
                    Kick
                    <input
                              defaultValue="100"
                              onChange={[Function]}
                              type="range"
                    />
          </div>
          <div
                    className="type"
          >
                    Snare
                    <input
                              defaultValue="100"
                              onChange={[Function]}
                              type="range"
                    />
          </div>
          <div
                    className="type"
          >
                    Open Hat
                    <input
                              defaultValue="100"
                              onChange={[Function]}
                              type="range"
                    />
          </div>
          <div
                    className="type"
          >
                    Closed Hat
                    <input
                              defaultValue="100"
                              onChange={[Function]}
                              type="range"
                    />
          </div>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="types"
>
          <div
                    className="type"
          >
                    Kick
                    <input
                              defaultValue="100"
                              onChange={[Function]}
                              type="range"
                    />
          </div>
          <div
                    className="type"
          >
                    Snare
                    <input
                              defaultValue="100"
                              onChange={[Function]}
                              type="range"
                    />
          </div>
          <div
                    className="type"
          >
                    Open Hat
                    <input
                              defaultValue="100"
                              onChange={[Function]}
                              type="range"
                    />
          </div>
          <div
                    className="type"
          >
                    Closed Hat
                    <input
                              defaultValue="100"
                              onChange={[Function]}
                              type="range"
                    />
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Types
    changeVolume={[Function]}
/>,
}
`;
